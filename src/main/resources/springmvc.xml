<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">


    <!--扫描包下带有注解的类,加入到spring容器中-->
    <context:component-scan base-package="controller" />

    <!--对静态资源不进行处理，例如js,css,jpg等等 -->
    <mvc:default-servlet-handler />

    <!--注解驱动,似的@RequestMapping注解生效-->
    <mvc:annotation-driven />

<!--    <aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          id="internalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <!-- 后缀 -->
        <property name="suffix" value=".jsp" />
    </bean>
    <mvc:annotation-driven >
        <!-- 消息转换器 -->
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <mvc:resources location="controller" mapping="/resources/**" />

    <!--springmvc异常处理-->

<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="defaultErrorView" value="error"/>-->
<!--        <property name="exceptionAttribute" value="ex"/>-->
<!--        -->
<!--        <property name="exceptionMappings">-->
<!--            <props>-->
<!--                <prop key="entity.MyException">/myerror</prop>-->
<!--            </props>-->
<!--                -->
<!--        </property>-->
<!--    </bean>-->


<!--    <mvc:interceptors>-->

<!--        <mvc:interceptor>-->
<!--            &lt;!&ndash;/*表示拦截所有请求,如果想拦截以某个名字(abc)结尾的请求path里写/*/abc,如果想拦截以某个名字(abc)开头的请求,path里写/abc/* &ndash;&gt;-->
<!--            <mvc:mapping path="/m5" />-->
<!--            &lt;!&ndash; 排除拦截的地址 &ndash;&gt;-->
<!--            &lt;!&ndash;  <mvc:exclude-mapping path="/*/login"/> 不拦截login结尾的请求 &ndash;&gt;-->
<!--            <bean id="commonInterceptor" class=" interceptor.MyInterceptor "></bean>-->
<!--        </mvc:interceptor>-->


<!--        <mvc:interceptor>-->
<!--            &lt;!&ndash;/*表示拦截所有请求,如果想拦截以某个名字(abc)结尾的请求path里写/*/abc,如果想拦截以某个名字(abc)开头的请求,path里写/abc/* &ndash;&gt;-->
<!--            <mvc:mapping path="/m5" />-->
<!--            &lt;!&ndash; 排除拦截的地址 &ndash;&gt;-->
<!--            &lt;!&ndash;  <mvc:exclude-mapping path="/*/login"/> 不拦截login结尾的请求 &ndash;&gt;-->
<!--            <bean id="commonInterceptor2" class=" interceptor.MyInterceptor2 "></bean>-->
<!--        </mvc:interceptor>-->

<!--    </mvc:interceptors>-->







</beans>
